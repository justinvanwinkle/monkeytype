[project]
name = "monkeytype"
requires-python = ">=3.13"

[tool.poetry]
version = "2.1.1"

[tool.black]
line_length = 79
skip_magic_trailing_comma = true
preview = true
enable_unstable_feature = ["hug_parens_with_braces_and_square_brackets", "wrap_long_dict_values_in_parens"]
target_version = ["py313"]

[tool.isort]
profile = "black"
force_alphabetical_sort_within_sections = true
multi_line_output = true
src_paths = ["monkeytype"]
remove_redundant_aliases = true
force_single_line = true
line_length = 80

[tool.ruff]
line-length = 79

[tool.ruff.lint.isort]
force-single-line = true
case-sensitive = false
order-by-type = false
force-sort-within-sections = false

[tool.ruff.format]
line-ending = "lf"

[tool.poetry.dependencies]

[tool.poetry.group.dev.dependencies]
black = "*"
isort = "*"
flake8 = "*"
# necessary to work with flake8 6.0.0
pytest = "*"
ruff = "*"
mypy = "*"
sphinx = "<7.2"
twine = "*"
tomli = "*"
tox = "*"
setuptools_rust = "*"
libcst = "*"
importlib_metadata = "*"

[tool.poetry.group.tools.dependencies]
ipython = "*"
jsbeautifier = "*"
pyright = "*"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff.lint]
# These are documented at https://docs.astral.sh/ruff/rules/

select = ["ALL"]


ignore = [
  # flake8-builtins
  'A',  # Checks for Python built-in names shadowed by variables, parameters, or attributes

  # flake8-annotations
  'ANN',  # Checks for presence and style of type annotations for function arguments and return values

  # flake8-unused-arguments
  'ARG',  # Checks for unused function arguments, method arguments, and lambda arguments

  # flake8-bugbear
  'B017',  # pytest.raises(Exception) considered too broad, specify more specific exceptions
  'B027',
  # flake8-blind-except
  'BLE',  # Checks for blind except statements (catching Exception, BaseException, or no exception type)

  # flake8-comprehensions
  'C400',  # Unnecessary generator (rewrite using list())
  'C401',  # Unnecessary generator (rewrite using set())
  'C408',  # Unnecessary {kind}() call (rewrite as a literal)
  'C409',  # Unnecessary list literal passed to tuple() (rewrite as a tuple literal)
  'C410',  # Unnecessary list literal passed to list() (remove the outer call to list())
  'C413',  # Unnecessary {func}() call around sorted()
  'C414',  # Unnecessary {inner}() call within {outer}()
  'C419',  # Unnecessary list comprehension

  # mccabe
  'C901',  # {name} is too complex ({complexity} > {max_complexity})

  # flake8-commas
  'COM812',  # Missing trailing comma in Python 3.6+ type annotations

  # flake8-copyright
  'CPY',  # Checks for missing copyright notice and license headers at the top of files

  # pydocstyle
  'D',  # Checks for compliance with Python docstring conventions (PEP 257)

  # pydoclint
  'DOC',  # More opinionated fork of pydocstyle with additional checks

  # flake8-datetimez
  'DTZ',  # Checks for naive datetime operations and timezone-aware best practices

  # pycodestyle
  'E701',  # Multiple statements on one line (colon)

  # eradicate
  'ERA001',  # Found commented-out code

  # flake8-boolean-trap
  'FBT',  # Checks for boolean parameters that create boolean traps in function signatures

  # flake8-fixme
  'FIX004',  # Line contains HACK, consider resolving the issue

  # flynt
  'FLY002',  # String could be converted to an f-string

  # flake8-logging-format
  'G',  # Various checks for logging format strings

  # isort
  'I',  # Checks and enforces consistent import ordering

  # flake8-no-pep420
  'INP001',  # File is part of an implicit namespace package

  # pep8-naming
  'N',  # Various checks for PEP 8 naming conventions

  # perflint
  'PERF401',  # Use list comprehension to create a transformed list
  'PERF402',  # Manual list creation can be replaced with generator expression
  'PERF403',  # Manual dict creation can be replaced with dict comprehension

  # pygrep-hooks
  'PGH003',  # Use specific rule codes when ignoring type issues

  # Pylint Convention
  'PLC0415',  # Import should be at the top-level of a file
  'PIE790',
  # Pylint Refactor
  'PLR0124',  # Comparison with itself
  'PLR0904',  # Too many public methods ({methods} > {max_methods})
  'PLR0911',  # Too many return statements ({returns} > {max_returns})
  'PLR0912',  # Too many branches ({branches} > {max_branches})
  'PLR0913',  # Too many arguments in function definition ({c_args} > {max_args})
  'PLR0914',  # Too many local variables ({current_amount}/{max_amount})
  'PLR0915',  # Too many statements ({statements} > {max_statements})
  'PLR0917',  # Too many positional arguments ({c_pos}/{max_pos})
  'PLR1702',  # Too many nested blocks ({nested_blocks} > {max_nested_blocks})
  'PLR2004',  # Magic value used in comparison, consider replacing with a constant variable
  'PLR6301',  # Method could be a function or static method

  # Pylint Warning
  'PLW',  # Various Pylint warnings for code quality and maintainability

  # flake8-pytest-style
  'PT008',  # Use return_value= instead of patching with lambda
  'PT009',  # Use a regular assert instead of unittest-style {assertion}
  'PT011',  # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  'PT017',  # Found assertion on exception {name} in except block, use pytest.raises() instead
  'PT018',  # pytest.raises() block should contain a single simple statement
  'PT019',  # Fixture {name} without value is injected as parameter, use @pytest.mark.usefixtures instead
  'PT027',  # Unused import in pytest fixture

  # flake8-pathlib
  'PTH',  # Enforces consistent use of pathlib.Path instead of os.path functions

  # flake8-pyi
  'PYI024',  # Use typing.NamedTuple instead of collections.namedtuple
  'PYI041',  # Use supertype instead of subtype | supertype

  # flake8-return
  'RET501',  # Do not explicitly return None in function if it is the only possible return value
  'RET502',  # Do not implicitly return None in function able to return non-None value
  'RET503',  # Missing explicit return at the end of function able to return non-None value
  'RET504',  # Unnecessary assignment to {name} before return statement
  'RET505',  # Unnecessary {branch} after return statement
  'RET506',  # Unnecessary {branch} after raise statement
  'RET507',  # Unnecessary {branch} after continue statement
  'RET508',  # Unnecessary {branch} after break statement

  # flake8-raise
  'RSE102',  # Unnecessary parentheses on raised exception

  # ruff-specific rules
  'RUF001',  # String contains ambiguous unicode character {}. Did you mean {}?
  'RUF002',  # Docstring contains ambiguous unicode character {}. Did you mean {}?
  'RUF003',  # Comment contains ambiguous unicode character {}. Did you mean {}?
  'RUF009',  # Do not perform function call {name} in dataclass defaults
  'RUF012',  # Mutable class attributes should be annotated with typing.ClassVar
  'RUF017',  # Avoid quadratic list summation pattern that causes poor performance
  'RUF100',  # Unused noqa directive (overrides disabled rules)

  # bandit (security linter)
  'S101',  # Use of assert detected. The enclosed code will be removed when compiling to optimized byte code
  'S105',  # Possible hardcoded password string: "{}"
  'S106',  # Possible hardcoded password argument: "{}"
  'S107',  # Possible hardcoded password default: "{}"
  'S311',  # Standard pseudo-random generators are not suitable for security/cryptographic purposes
  'S404',  # subprocess module is possibly insecure
  'S603',  # subprocess call: check for execution of untrusted input

  # flake8-simplify
  'SIM103',  # Return the condition {condition} directly
  'SIM105',  # Use contextlib.suppress({exception}) instead of try-except-pass
  'SIM108',  # Use ternary operator {contents} instead of if-else-block
  'SIM110',  # Use {replacement} instead of for loop
  'SIM113',  # Use enumerate() for index variable {index} in for loop
  'SIM115',  # Use {contents} instead of an if block
  'SIM117',  # Use a set instead of multiple 'or' conditions

  # flake8-self
  'SLF001',  # Private member accessed outside of class where it was defined

  # flake8-print
  'T201',  # print found

  # type-checking lint
  'TCH',  # Handles type checking imports and typing-related issues
  'TC006',  # Type expression in typing.cast() needs quotes to prevent runtime errors

  # flake8-todos
  'TD002',  # Missing author in TODO
  'TD003',  # Missing issue link in TODO

  # tryceratops
  'TRY',

  # pyupgrade
  'UP',  # Automatically upgrades syntax for newer versions of Python
]
